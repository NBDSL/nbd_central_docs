#########################
Launch your first job
#########################


Choose your input file
++++++++++++++++++++++++++


Choose your input file depending on what you want to do with your system by following the next workflow:

.. figure:: cheatsheet_pele.png
   :align: center

Prepare your working folder
+++++++++++++++++++++++++++++++++++++++

In this section we will set our working folder accordingly to the functionality (0, 1, 2 or 3 ) we chose  in the workflow above.


If you chose 0:
```````````````
.. code-block:: bash
    
    git clone https://github.com/NostrumBioDiscovery/control_files.git
    cp -r control_files/0_global_exploration .
    cd 0_global_exploration


If you chose 1:
```````````````
.. code-block:: bash
    
    git clone https://github.com/NostrumBioDiscovery/control_files.git
    cp -r control_files/1_free_local .
    cd  1_free_local

If you chose 2:
```````````````
.. code-block:: bash
    
    git clone https://github.com/NostrumBioDiscovery/control_files.git
    cp -r control_files/2_bias_exploration .
    cd 2_bias_exploration

If you chose 3:
```````````````

.. code-block:: bash
    
    git clone https://github.com/NostrumBioDiscovery/control_files.git
    cp -r control_files/3_induced_fit .
    cd  3_induced_fit


Prepare complex
+++++++++++++++++++

1) Check complex, remove crystal buffer and non important waters, include water shell around critical metals (as MG cofactors)
2) Protein Preparation Wizard maestro
3) Refine protonation with maestro and output complex.pdb
4) **Make sure the ligand has**:  
    - Unique chain
    - No atomnames with spaces
    - Any residuename except UNK
5) python -m PPP.main -ipdb complex.pdb **(output: complex_processed.pdb)**

**If the 5th step duplicate the residues within your pdb send a message to daniel.soler@nostrumbiodiscovery.com and move forward with the pdb from point 4**


Prepare ligand
+++++++++++++++++++

1) **From the complex_processed.pdb above** charge this pdb to maestro again, isolate the ligand in maestro and output lig.mae.
2) /opt/schrodinger2018-2(or lower)/utilities/python /path/to/PlopRotTemp/main.py lig.mae **(this will generate two files: ligz, LIG.rot.assign)**
3) cp ligz DataLocal/Templates/OPLS2005/HeteroAtoms/
4) cp LIG.rot.assign DataLocal/LigRotlib


Prepare control files
++++++++++++++++++++++++++++

pele.conf
```````````

**1) vim pele.conf and change:**

- "licenseDirectoryPath": "/path/to/licenses/"

.. code-block:: json

   {"licenseDirectoryPath": "/opt/apps/PELE"}

- chain of the ligand to perturb to your ligand chain


.. code-block:: json

    {"selectionToPerturb" : { "chains" : { "names" : [ "L" ] } }}

.. code-block:: json

    { "type" : "bindingEnergy", "boundPartSelection" : {"chains": { "names": [ "L" ] } } }

.. code-block:: json

    { "type" : "bindingEnergy", "boundPartSelection" : {"chains": { "names": [ "L" ] } } }
    
- box center and radius based on receptor grid generation from maestro. We use the receptor grid from Maestro to display the box and give you a visual idea of what will you be exploring along the simulation.


.. code-block:: json

    {
    "Box" : { "radius" : 35, 
    "fixedCenter": [ 14,13,41 ], 
    "type" : "sphericalBox" },
    }
    

- metrics you want to calculate (Choose a metric allows you to identify different poses once the simulation is done. Distance from the ligand to a residue, or distance from the ligand to a point in the cartesian space). Fore more information, please refer to: `metrics section <../Sensors/MetricTypes.html>`__

.. code-block:: json

   { "type": "com_distance",
          "selection_group_1": { "atoms": { "ids": ["L:1:_O3_"] } },
          "selection_group_2": { "links": { "ids": ["A:315"] } },
          "tag": "distance"
   }

    

**2) python -m Helpers.constraints complex_processed.pdb pele.conf**

   That will convert the $CONSTRAINTS field inside pele.conf into the next json-code:


.. code-block:: json

    {"type":"constrainAtomToPosition","springConstant":0.5,"equilibriumDistance":0,"constrainThisAtom":"A:512:_CA_"}
    
    
adaptive.conf
`````````````````````````````````

**3) vim adaptive.conf**

- change input pdb

.. code-block:: json
    
    {"initialStructures" : ["input.pdb"]}

- If bias simulation change the column of the report that you want to bias the simulation to and the degree of bias [0-1]:


.. code-block:: json
    
    {
    "metricColumnInReport" : 5,
    "epsilon" : 0.25
    }

- change ligand resname
    
.. code-block:: json

    {"ligandResname" : "DRG"}

- decrease the processors if you do not have as many as the input file says.

.. code-block:: json

   {"processors" : 64 }


Run simulation
+++++++++++++++++++

1) python -m AdaptivePELE.adaptiveSampling adaptive.conf 

**If there is an error please check the message and change whatever. If you do not understand the error message, please contact daniel.soler@nostrumbiodiscovery.com**



